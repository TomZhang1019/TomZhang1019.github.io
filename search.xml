<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库系统概论笔记</title>
      <link href="/2023/03/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库相关名词解释"><a href="#数据库相关名词解释" class="headerlink" title="数据库相关名词解释"></a>数据库相关名词解释</h3><p><strong>数据</strong>: 描述事物的符号记录<br><strong>数据库</strong>: 长期存储在计算机内有组织的, 可共享的大量数据的集合<br><strong>数据库管理系统</strong>: 位于用户与操作系统之间的一层数据管理软件<br><strong>数据库系统</strong>: 由数据库, 数据库管理系统, 应用程序和数据库管理员组 成的存储, 管理, 处理和维护数据的系统</p><h3 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h3><ol><li>数据结构化</li><li>数据的共享性高, 冗余度低且易扩充</li><li>数据独立性高</li><li>数据由数据库管理系统统一管理和控制</li></ol><h3 id="数据库管理系统的主要功能"><a href="#数据库管理系统的主要功能" class="headerlink" title="数据库管理系统的主要功能"></a>数据库管理系统的主要功能</h3><ol><li>数据定义功能</li><li>数据组织, 存储和管理</li><li>数据操纵功能</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li></ol><h3 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h3><p>概念模型是现实世界到机器世界的一个中间层次<br><strong>作用</strong>: </p><ol><li>用于信息世界的建模</li><li>是数据库设计人员进行数据库设计的有力工具</li><li>是数据库设计人员和用户之间进行交流的语言</li></ol><h3 id="实体型相关名词解释"><a href="#实体型相关名词解释" class="headerlink" title="实体型相关名词解释"></a>实体型相关名词解释</h3><p><strong>实体</strong>: 客观存在并可以相互区分的事物叫实体<br><strong>实体型</strong>: 用实体名及其属性名集合来抽象和刻画同类实体称为实体型<br><strong>实体集</strong>: 同一类型实体的集合称为实体集<br><strong>实体之间的联系</strong>：包括实体(型)内部的联系和实体(型)之间的联系. 实体内部的联系通常是指组成实体的各属性之间的联系; 实体之间的联系通常是指不同实体集之间的联系. 实体之间的联系有一对一、一对多和多对多等多种类型</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据模型是对现实世界数据特征的抽象,是严格定义的一组概念的集合.</p><p><strong>作用</strong>:</p><ol><li>用来描述数据,组织数据和对数据进行操作</li><li>用于在数据库中提供信息表示和操作手段</li></ol><p><strong>数据模型三要素</strong>:</p><ul><li>数据结构</li><li>数据操作</li><li>数据的完整性约束条件</li></ul><h3 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h3><p>在数据库中满足以下两个条件的基本层次联系的集合为层次模型:</p><ol><li>有且只有一个结点没有双亲结点, 这个结点称为根结点</li><li>根以外的其他结点有且只有一个双亲结点</li></ol><p><strong>实例</strong>:</p><ul><li>行政机构层次数据库模型: 机构-处室-职工</li><li>行政区域层次数据库模型: 国家-省-市</li><li>学校层次数据库模型: 学校-学院-专业系</li></ul><h3 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h3><p>在数据库中满足以下两个条件的基本层次联系的集合为网状模型:</p><ol><li>允许一个以上的结点无双亲</li><li>一个结点可以有多于一个的双亲</li></ol><p><strong>实例</strong>: </p><h3 id="层次数据库和网状数据库优缺点"><a href="#层次数据库和网状数据库优缺点" class="headerlink" title="层次数据库和网状数据库优缺点"></a>层次数据库和网状数据库优缺点</h3><p><strong>层次数据库优点</strong>：</p><ol><li>层次数据库的数据结构比较简单清晰</li><li>层次数据库的查询效率高</li><li>层次数据数据库提供了良好的完整性支持</li></ol><p><strong>层次数据库缺点</strong>：</p><ol><li>现实世界中很多联系是非层次性的，层次数据库不能自然地表示这类联系</li><li>层次数据库中的查询必须按照层次结构从根结点开始，沿着路径进行。因此，用户必须清楚所用数据库的层次结构，对用户的要求自然比较高了</li></ol><p><strong>网状数据库优点</strong>：</p><ol><li>能够更为直接地描述现实世界，如一个结点可以有多个双亲</li><li>具有良好的性能，存取效率较高</li></ol><p><strong>网状数据库缺点</strong>：</p><ol><li>结构比较复杂，而且随着应用环境的扩大，数据库的结构变得越来越复杂，不利于最终用户掌握</li><li>网状数据库的数据定义语言(DDL)、数据操纵语言(DML)比较复杂，要求用户掌握数据库结构和存取路径，不容易使用</li></ol><h3 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h3><p>关系模型由关系数据结构、关系操作集合和关系完整性约束三部分组成。在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。</p><p><strong>关系</strong>：一个关系对应通常说的一张表。<br><strong>属性</strong>：表中的一列即为一个属性。<br><strong>域</strong>：属性的取值范围。<br><strong>元组</strong>：表中的一行即为一个元组。<br><strong>码</strong>：表中的某个属性组，它可以唯一确定一个元组。<br><strong>分量</strong>：元组中的一个属性值。<br><strong>关系模式</strong>：对关系的描述，一般表示为关系名(属性1,属性2,⋯,属性n)</p><h3 id="关系数据库特点"><a href="#关系数据库特点" class="headerlink" title="关系数据库特点"></a>关系数据库特点</h3><p>关系数据库是建立在关系数据模型上的<br><strong>优点</strong>:</p><ol><li>关系模型与非关系模型不同，它具有严格的数学基础。</li><li>关系模型的概念单一，所以其数据结构简单、清晰，用户易懂易用。</li><li>关系模型的存取路径对用户透明，从而具有更高的数据独立性、更好的安全保密性，也简化了程序员的工作和数据库开发建立的工作。</li></ol><p><strong>缺点</strong>: </p><ol><li>由于存取路径对用户透明，查询效率往往不如非关系数据模型。</li><li>为了提高性能，必须对用户的查询请求进行优化，这就增加了开发关系数据库管理系统软件的难度。</li></ol><h3 id="数据库系统三级模式结构和及此结构优点"><a href="#数据库系统三级模式结构和及此结构优点" class="headerlink" title="数据库系统三级模式结构和及此结构优点"></a>数据库系统三级模式结构和及此结构优点</h3><p>外模式、模式和内模式</p><p>数据库系统在这三级模式之间提供了两级映像：外模式/模式映像和模式/内模式映像。正是这两级映像保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性。</p><h3 id="数据库模式相关名词解释"><a href="#数据库模式相关名词解释" class="headerlink" title="数据库模式相关名词解释"></a>数据库模式相关名词解释</h3><p><strong>外模式</strong>: 亦称子模式或用户模式，是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图。<br><strong>模式</strong>: 亦称逻辑模式，是数据库中全体数据的逻辑结构和特性的描述，是所有用户的公共数据视图。模式描述的是数据的全局逻辑结构。外模式通常是模式的子集。<br><strong>内模式</strong>: 亦称存储模式，是数据在数据库系统内部的表示，即对数据的物理结构和存储方式的描述。<br><strong>数据定义语言</strong>：用来定义数据库模式、外模式和内模式的语言。<br><strong>数据操纵语言</strong>：用来对数据库中的数据进行查询、插入、删除和修改的语句。</p><h3 id="数据与程序的独立性"><a href="#数据与程序的独立性" class="headerlink" title="数据与程序的独立性"></a>数据与程序的独立性</h3><p><strong>数据与程序的物理独立性</strong>：当数据库的存储结构发生改变时，由数据库管理员对模式/内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变，这就是数据与程序的物理独立性，简称数据的物理独立性。</p><p><strong>数据与程序的逻辑独立性</strong>：当数据的逻辑结构即模式改变时，由数据库管理员对各个外模式/模式的映像作相应改变，可以使外模式保持不变，从而应用程序不必修改，这就是数据与程序的逻辑独立性，简称数据的逻辑独立性。</p><p><strong>为什么数据库系统具有数据与程序的独立性?</strong><br>DBMS在三级模式之间提供的两级映像保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性。</p><h3 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h3><ul><li>数据库</li><li>数据库管理系统(及其开发工具)</li><li>应用系统</li><li>数据库管理员和用户</li></ul><h3 id="数据库相关人员职责"><a href="#数据库相关人员职责" class="headerlink" title="数据库相关人员职责"></a>数据库相关人员职责</h3><p><strong>数据库管理员</strong>:全面负责管理和控制数据库系统, 具体职责包括：</p><ol><li>决定数据库的信息内容和结构</li><li>决定数据库的存储结构和存取策略</li><li>定义数据的安全性要求和完整性约束条件</li><li>监控数据库的使用和运行</li><li>数据库系统的改进和重组重构</li></ol><p><strong>系统分析员</strong>: 负责应用系统的需求分析和规范说明, 他要和用户及DBA相结合, 确定系统的硬件软件配置, 并参与数据库系统的概要设计</p><p><strong>数据库设计人员</strong>: 负责数据库中数据的确定和数据库各级模式的设计. 数据库设计人员必须参加用户需求调查和系统分析，然后进行数据库设计</p><p><strong>应用程序员</strong>: 负责设计和编写应用系统的程序模块, 并进行调试和安装</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/03/06/test/"/>
      <url>/2023/03/06/test/</url>
      
        <content type="html"><![CDATA[<h3 id="测试-测试-测试"><a href="#测试-测试-测试" class="headerlink" title="测试 测试 测试"></a>测试 测试 测试</h3><p>测试 测试<br>测试 测试<br>测试 测试</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
